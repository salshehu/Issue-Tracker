// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum Contract{
  FULL_TIME
  PART_TIME
  OUTSOURCED
}

model Issue {
  id            Int       @id @default(autoincrement())
  devId         String?
  title         String    @db.VarChar(255)
  description   String    @db.Text
  status        Status    @default(OPEN)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  dateCompleted DateTime?
  devs      Developers?     @relation(fields: [devId], references: [id])
  debugging Debugging?
}
model Developers {
  id        String     @id @default(cuid())
  userName  String  @unique
  firstName String
  lastName  String
  contract  Contract @default(FULL_TIME)
  profilePic  String?
  address   String?
  email     String  @unique
  issues    Issue[]
  debugging   Debugging?
}

model Debugging{
  issueId            Int @unique
  devId           String @unique
  completeRate    Float
  completed   Boolean @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  issue         Issue @relation(fields: [issueId], references: [id])
  dev           Developers @relation(fields: [devId], references: [id])
  @@id([issueId, devId])
}


model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id             String    @id @default(cuid())
  name           String?
  organisation   String?
  country        String?
  email          String?   @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  sessions       Session[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
